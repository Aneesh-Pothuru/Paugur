{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aneeshpothuru/Documents/GitHubProjects/paugur/src/api/comment-extractor/youtube-extractor/youtube-extractor.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport axios from 'axios';\nimport { websitePrefix } from '../../api-info';\nimport Input from '../../../components/input/input';\nimport Button from '../../../components/button/button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setApiKey } from '../../../redux/user/user.actions';\nimport { setMediaId } from '../../../redux/media/media.actions';\nimport { startLoading, cancelLoading } from '../../../redux/loading/loading.actions';\nimport { setComments, setVideoInfo, setCreatorInfo } from '../../../redux/media/media.actions';\nimport './youtube-extractor.css';\nexport const youtubeExtractor = (mediaId, apiKey) => {\n  return axios({\n    url: websitePrefix + 'api/youtube_extractor/' + mediaId + '/' + apiKey,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    mode: 'cors'\n  });\n};\n\nconst YoutubeAPI = () => {\n  _s();\n\n  const {\n    mediaId\n  } = useSelector(state => state.mediaReducer);\n  const {\n    apiKey\n  } = useSelector(state => state.userReducer);\n  const dispatch = useDispatch();\n\n  const onKeyChange = event => {\n    dispatch(setApiKey(event.target.value));\n  };\n\n  const onIdChange = event => {\n    dispatch(setMediaId(event.target.value));\n  };\n\n  const onButtonRequest = () => {\n    dispatch(startLoading());\n    youtubeExtractor(mediaId, apiKey).then(response => {\n      dispatch(setVideoInfo(response.data.video));\n      dispatch(setCreatorInfo(response.data.channel));\n      dispatch(setComments(JSON.parse(response.data.comments)));\n      dispatch(cancelLoading());\n    }).catch(error => {\n      dispatch(cancelLoading());\n      alert('Something went wrong, Recorded ' + error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      name: \"apiKey\",\n      type: \"text\",\n      label: \"API Key\",\n      value: apiKey,\n      inputChange: onKeyChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      name: \"mediaId\",\n      type: \"text\",\n      label: \"Video ID\",\n      value: mediaId,\n      inputChange: onIdChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onButtonRequest,\n        label: \"Query\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(YoutubeAPI, \"ttE4r+Ay6HtozJQO2i2V2ZoZptE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = YoutubeAPI;\nexport default YoutubeAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"YoutubeAPI\");","map":{"version":3,"sources":["/Users/aneeshpothuru/Documents/GitHubProjects/paugur/src/api/comment-extractor/youtube-extractor/youtube-extractor.js"],"names":["React","axios","websitePrefix","Input","Button","useDispatch","useSelector","setApiKey","setMediaId","startLoading","cancelLoading","setComments","setVideoInfo","setCreatorInfo","youtubeExtractor","mediaId","apiKey","url","method","headers","mode","YoutubeAPI","state","mediaReducer","userReducer","dispatch","onKeyChange","event","target","value","onIdChange","onButtonRequest","then","response","data","video","channel","JSON","parse","comments","catch","error","alert"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios';\nimport { websitePrefix } from '../../api-info'\nimport Input from '../../../components/input/input'\nimport Button from '../../../components/button/button'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setApiKey } from '../../../redux/user/user.actions'\nimport { setMediaId } from '../../../redux/media/media.actions'\nimport { startLoading, cancelLoading } from '../../../redux/loading/loading.actions'\nimport { setComments, setVideoInfo, setCreatorInfo } from '../../../redux/media/media.actions'\nimport './youtube-extractor.css'\n\nexport const youtubeExtractor = (mediaId, apiKey) => {\n    return axios({\n        url: websitePrefix + 'api/youtube_extractor/' + mediaId + '/' + apiKey,\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        mode: 'cors',\n    })\n}\n\nconst YoutubeAPI = () => {\n    const { mediaId } = useSelector(state => state.mediaReducer);\n    const { apiKey } = useSelector(state => state.userReducer);\n    const dispatch = useDispatch();\n\n    const onKeyChange = (event) => {\n        dispatch(setApiKey(event.target.value))\n    }\n\n    const onIdChange = (event) => {\n        dispatch(setMediaId(event.target.value))\n    }\n\n    const onButtonRequest = () => {\n        dispatch(startLoading());\n        youtubeExtractor(mediaId, apiKey).then(response => {\n            dispatch(setVideoInfo(response.data.video));\n            dispatch(setCreatorInfo(response.data.channel));\n            dispatch(setComments(JSON.parse(response.data.comments)));\n            dispatch(cancelLoading());\n        }).catch(error => {\n            dispatch(cancelLoading());\n            alert('Something went wrong, Recorded ' + error);\n        })\n    }\n\n    return (\n        <div>\n            <Input\n                name='apiKey'\n                type=\"text\"\n                label=\"API Key\"\n                value={apiKey}\n                inputChange={onKeyChange}\n            />\n            <Input\n                name=\"mediaId\"\n                type=\"text\"\n                label=\"Video ID\"\n                value={mediaId}\n                inputChange={onIdChange}\n            />\n            <div className=\"center\">\n                <Button onClick={onButtonRequest} label=\"Query\" />\n            </div>\n        </div>\n    )\n}\n\nexport default YoutubeAPI;"]},"metadata":{},"sourceType":"module"}